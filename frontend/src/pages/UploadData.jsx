import React, { useState, useEffect } from "react"; // Th√™m useEffect
import * as XLSX from "xlsx";
import axios from "axios";
import "../css/UploadData.css";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import { useAuth } from "../services/AuthContext";
import { Spinner, Alert } from "react-bootstrap"; // Th√™m Spinner v√† Alert ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i loading/error
import Swal from 'sweetalert2';
// C√†i ƒë·∫∑t ch·∫ø ƒë·ªô: true: d√πng mock data, false: d√πng API th·∫≠t
const USE_MOCK_DATA = false; // Gi·ªØ nguy√™n ho·∫∑c thay ƒë·ªïi n·∫øu c·∫ßn

// --- X√ìA mockTemplates ---

const UploadData = () => {
  const { user } = useAuth();
  const [file, setFile] = useState(null);
  const [selectedTemplate, setSelectedTemplate] = useState(null);
  const [parsedData, setParsedData] = useState([]);
  const [validationErrors, setValidationErrors] = useState([]);
  const [selectedDate, setSelectedDate] = useState(() => {
    const today = new Date();
    return new Date(today.getFullYear(), today.getMonth() - 1, 1); // L√πi 1 th√°ng
  });
  const [templates, setTemplates] = useState([]); // State ƒë·ªÉ l∆∞u templates t·ª´ API
  const [loadingTemplates, setLoadingTemplates] = useState(false); // State loading cho templates
  const [errorTemplates, setErrorTemplates] = useState(null); // State error cho templates
  const [loadingSubmit, setLoadingSubmit] = useState(false); // State loading khi submit
  const [submitError, setSubmitError] = useState(null); // State l·ªói khi submit
  const [submitSuccess, setSubmitSuccess] = useState(null); // State th√†nh c√¥ng khi submit


  // --- TH√äM useEffect ƒê·ªÇ G·ªåI API TEMPLATES ---
  useEffect(() => {
    const fetchTemplates = async () => {
      setLoadingTemplates(true);
      setErrorTemplates(null);
      try {
        const response = await axios.get(
          `${import.meta.env.VITE_SIMO_APP_API_URL}/api/templates`,
          {
            headers: {
              "Content-Type": "application/json",
              "Authorization": "Bearer " + user?.token, // S·ª≠ d·ª•ng optional chaining ƒë·ªÅ ph√≤ng user ch∆∞a c√≥
            },
          }
        );
        setTemplates(response.data);
        // Kh√¥ng t·ª± ƒë·ªông ch·ªçn template ƒë·∫ßu ti√™n, ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn
      } catch (err) {
        console.error("Error fetching templates", err);
        setErrorTemplates("Kh√¥ng th·ªÉ t·∫£i danh s√°ch template. Vui l√≤ng th·ª≠ l·∫°i.");
      } finally {
        setLoadingTemplates(false);
      }
    };

    if (user?.token) { // Ch·ªâ fetch khi c√≥ token
        fetchTemplates();
    } else {
        setErrorTemplates("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫£i danh s√°ch template.");
    }
  }, [user?.token]); // Dependency l√† user.token ƒë·ªÉ fetch l·∫°i n·∫øu token thay ƒë·ªïi

  // Ch·ªçn file Excel
  const handleFileUpload = async  (event) => {
    const uploadedFile = event.target.files[0];
    setFile(uploadedFile);
    // Reset tr·∫°ng th√°i khi ch·ªçn file m·ªõi
    setParsedData([]);
    setValidationErrors([]);
    setSubmitError(null);
    setSubmitSuccess(null);
    // T·∫°o formData v√† upload file g·ªëc
  const formData = new FormData();
  formData.append('file', uploadedFile);

  try {
    const response = await axios.post(
      `${import.meta.env.VITE_SIMO_APP_API_URL}/api/upload`, 
      formData,
      {
        headers: {
          'Content-Type': 'multipart/form-data',
          'Authorization': 'Bearer ' + user?.token,
        },
      }
    );
    console.log("Upload file Excel th√†nh c√¥ng:", response.data);
  } catch (error) {
    console.error("L·ªói khi upload file Excel:", error);
    alert("Kh√¥ng th·ªÉ upload file Excel. Vui l√≤ng th·ª≠ l·∫°i.");
  }
  };

  // Ch·ªçn template t·ª´ dropdown
  const handleTemplateSelect = (event) => {
    const templateId = event.target.value;
    // --- THAY ƒê·ªîI: T√¨m template trong state 'templates' ---
    const template = templates.find((t) => t.id === templateId); // Gi·∫£ s·ª≠ API tr·∫£ v·ªÅ 'id'
    setSelectedTemplate(template);
    // Reset tr·∫°ng th√°i khi ch·ªçn template m·ªõi
    setParsedData([]);
    setValidationErrors([]);
    setSubmitError(null);
    setSubmitSuccess(null);
  };

  // H√†m mapping d·ªØ li·ªáu t·ª´ file Excel sang c·∫•u tr√∫c c·ªßa API 1.6
  // Gi·ªØ nguy√™n h√†m n√†y n·∫øu c·∫•u tr√∫c mapping v·∫´n ƒë√∫ng 
  // const mapDataForAPI16 = (data) => { 
  //     console.log(data);
  //     return data.map((row, rowIndex) => ({
  //       Cif: row["S·ªë CIF"] || row["CIF"] || row["Cif"] || "",
  //       SoID: row["S·ªë ID"] || row["SoID"] || "",
  //       LoaiID: row["Lo·∫°i ID"] || row["LoaiID"] || "",
  //       TenKhachHang: row["T√™n kh√°ch h√†ng"] || row["TenKhachHang"] || "",
  //       NgaySinh: row["Ng√†y sinh"] || row["NgaySinh"] || "",
  //       GioiTinh: row["Gi·ªõi t√≠nh"] || row["GioiTinh"] || "",
  //       MaSoThue: row["M√£ s·ªë thu·∫ø"] || row["MaSoThue"] || "",
  //       SoDienThoaiDangKyDichVu: row["S·ªë ƒëi·ªán tho·∫°i ƒëƒÉng k√Ω d·ªãch v·ª• Mobile banking"] || row["SoDienThoaiDangKyDichVu"] || "",
  //       DiaChi: row["ƒê·ªãa ch·ªâ"] || row["DiaChi"] || "",
  //       SoTaiKhoan: row["S·ªë t√†i kho·∫£n"] || row["SoTaiKhoan"] || "",
  //       LoaiTaiKhoan: row["Lo·∫°i t√†i kho·∫£n"] || row["LoaiTaiKhoan"] || "",
  //       TrangThaiHoatDongTaiKhoan: row["Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa t√†i kho·∫£n"] || row["TrangThaiHoatDongTaiKhoan"] || "",
  //       NgayMoTaiKhoan: row["Ng√†y m·ªü TK "] || row["NgayMoTaiKhoan"] || "",
  //       PhuongThucMoTaiKhoan: row["Ph∆∞∆°ng th·ª©c m·ªü TKTT"] || row["PhuongThucMoTaiKhoan"] || "",
  //       QuocTich: row["Qu·ªëc t·ªãch"] || row["QuocTich"] || "",
  //       DiaChiKiemSoatTruyCap: row["ƒê·ªãa ch·ªâ ki·ªÉm so√°t truy c·∫≠p ph∆∞∆°ng ti·ªán truy·ªÅn th√¥ng"] || row["DiaChiKiemSoatTruyCap"] || "",
  //     }));
  //   };
  const mapDataForAPI16 = (data) => {
    return data.map((row, rowIndex) => {
      if (rowIndex === 7) {
        console.log("üîç Debug row 7:", row);
        var GioiTinh1 = row["Gi·ªõi t√≠nh"] || row["GioiTinh"] || "" ; 
        console.log(row["GioiTinh"]);
        console.log(GioiTinh1);
      }
  
      return {
        Cif: row["S·ªë CIF"] || row["CIF"] || row["Cif"] || "",
        SoID: row["S·ªë ID"] || row["SoID"] || "",
        LoaiID: row["Lo·∫°i ID"] || row["LoaiID"] || "",
        TenKhachHang: row["T√™n kh√°ch h√†ng"] || row["TenKhachHang"] || "",
        NgaySinh: row["Ng√†y sinh"] || row["NgaySinh"] || "",
        GioiTinh: row["Gi·ªõi t√≠nh"] ?? row["GioiTinh"] ?? "",
        MaSoThue: row["M√£ s·ªë thu·∫ø"] || row["MaSoThue"] || "",
        SoDienThoaiDangKyDichVu: row["S·ªë ƒëi·ªán tho·∫°i ƒëƒÉng k√Ω d·ªãch v·ª• Mobile banking"] || row["SoDienThoaiDangKyDichVu"] || "",
        DiaChi: row["ƒê·ªãa ch·ªâ"] || row["DiaChi"] || "",
        SoTaiKhoan: row["S·ªë t√†i kho·∫£n"] || row["SoTaiKhoan"] || "",
        LoaiTaiKhoan: row["Lo·∫°i t√†i kho·∫£n"] || row["LoaiTaiKhoan"] || "",
        TrangThaiHoatDongTaiKhoan: row["Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa t√†i kho·∫£n"] || row["TrangThaiHoatDongTaiKhoan"] || "",
        NgayMoTaiKhoan: row["Ng√†y m·ªü TK "] || row["NgayMoTaiKhoan"] || "",
        PhuongThucMoTaiKhoan: row["Ph∆∞∆°ng th·ª©c m·ªü TKTT"] || row["PhuongThucMoTaiKhoan"] || "",
        QuocTich: row["Qu·ªëc t·ªãch"] || row["QuocTich"] || "",
        DiaChiKiemSoatTruyCap: row["ƒê·ªãa ch·ªâ ki·ªÉm so√°t truy c·∫≠p ph∆∞∆°ng ti·ªán truy·ªÅn th√¥ng"] || row["DiaChiKiemSoatTruyCap"] || "",
      };
    });
  };
      const mapDataForAPI19 = (data) => { 
      return data.map((row, rowIndex) => ({
        Cif: row["S·ªë CIF"] || row["CIF"] || row["Cif"] || "",
        SoID: row["S·ªë ID"] || row["SoID"] || "",
        LoaiID: row["Lo·∫°i ID"] || row["LoaiID"] || "",
        TenKhachHang: row["T√™n kh√°ch h√†ng"] || row["TenKhachHang"] || "",
        NgaySinh: row["Ng√†y sinh"] || row["NgaySinh"] || "",
        GioiTinh:  row["Gi·ªõi t√≠nh"] ?? row["GioiTinh"] ?? "",
        MaSoThue: row["M√£ s·ªë thu·∫ø"] || row["MaSoThue"] || "",
        SoDienThoaiDangKyDichVu: row["S·ªë ƒëi·ªán tho·∫°i ƒëƒÉng k√Ω d·ªãch v·ª• Mobile banking"] || row["SoDienThoaiDangKyDichVu"] || "",
        DiaChi: row["ƒê·ªãa ch·ªâ"] || row["DiaChi"] || "",
        SoTaiKhoan: row["S·ªë t√†i kho·∫£n"] || row["SoTaiKhoan"] || "",
        LoaiTaiKhoan: row["Lo·∫°i t√†i kho·∫£n"] || row["LoaiTaiKhoan"] || "",
        TrangThaiHoatDongTaiKhoan: row["Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa t√†i kho·∫£n"] || row["TrangThaiHoatDongTaiKhoan"] || "",
        NgayMoTaiKhoan: row["Ng√†y m·ªü TK "] || row["NgayMoTaiKhoan"] || "",
        PhuongThucMoTaiKhoan: row["Ph∆∞∆°ng th·ª©c m·ªü TKTT"] || row["PhuongThucMoTaiKhoan"] || "",
        QuocTich: row["Qu·ªëc t·ªãch"] || row["QuocTich"] || "",
        DiaChiKiemSoatTruyCap: row["ƒê·ªãa ch·ªâ ki·ªÉm so√°t truy c·∫≠p ph∆∞∆°ng ti·ªán truy·ªÅn th√¥ng"] || row["DiaChiKiemSoatTruyCap"] || "",
         GhiChu: row["Ghi ch√∫"] || row["GhiChu"] || ""
      }));
    };
const mapDataForAPI17 = (data) => {
  return data.map((row, rowIndex) => ({
    Cif: row["S·ªë CIF"] || row["CIF"] || row["Cif"] || "",
    SoTaiKhoan: row["S·ªë t√†i kho·∫£n"] || row["SoTaiKhoan"] || "",
    TenKhachHang: row["T√™n kh√°ch h√†ng"] || row["TenKhachHang"] || "",
    TrangThaiHoatDongTaiKhoan: row["Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa t√†i kho·∫£n"] || row["TrangThaiHoatDongTaiKhoan"] || "",
    NghiNgo: row["Nghi ng·ªù"] || row["NghiNgo"] || "",
    GhiChu: row["Ghi ch√∫"] || row["GhiChu"] || ""
  }));
};
const mapDataForAPI18 = (data) => {
  return data.map((row, rowIndex) => ({
    Cif: row["S·ªë CIF"] || row["CIF"] || row["Cif"] || "",
    SoTaiKhoan: row["S·ªë t√†i kho·∫£n"] || row["SoTaiKhoan"] || "",
    TenKhachHang: row["T√™n kh√°ch h√†ng"] || row["TenKhachHang"] || "",
    TrangThaiHoatDongTaiKhoan: row["Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa t√†i kho·∫£n"] || row["TrangThaiHoatDongTaiKhoan"] || "",
    NghiNgo: row["Nghi ng·ªù"] || row["NghiNgo"] || "",
    GhiChu: row["Ghi ch√∫"] || row["GhiChu"] || "",
    LyDoCapNhat: row["L√Ω do c·∫≠p nh·∫≠t"] || row["LyDoCapNhat"] || ""
    
  }));
};
  // Validate d·ªØ li·ªáu d·ª±a tr√™n schema c·ªßa template
  function parseSchemaJson(schemaJsonString) {
    try {
      if (typeof schemaJsonString !== 'string' || !schemaJsonString.trim()) {
        throw new Error("Schema kh√¥ng h·ª£p l·ªá (kh√¥ng ph·∫£i chu·ªói ho·∫∑c r·ªóng).");
      }
  
      let parsed = JSON.parse(schemaJsonString); // L·∫ßn parse ƒë·∫ßu ti√™n
  
      // N·∫øu k·∫øt qu·∫£ l√† string ti·∫øp (nghƒ©a l√† JSON l·ªìng chu·ªói), parse th√™m l·∫ßn n·ªØa
      if (typeof parsed === 'string') {
        parsed = JSON.parse(parsed); // L·∫ßn parse th·ª© hai (n·∫øu c·∫ßn)
      }
  
      // Ki·ªÉm tra l·∫ßn cu·ªëi
      if (typeof parsed !== 'object' || parsed === null) {
        throw new Error("Schema kh√¥ng h·ª£p l·ªá (kh√¥ng ph·∫£i object sau khi parse).");
      }
  
      return parsed;
    } catch (e) {
      console.error("Kh√¥ng th·ªÉ ph√¢n t√≠ch schemaJson:", e.message);
      return null;
    }
  }
  const validateData = (data, schemaJsonString) => {
    let errors = [];
  
    const schema = parseSchemaJson(schemaJsonString);
    if (!schema) {
      errors.push("L·ªói c·∫•u tr√∫c Schema Template: Kh√¥ng th·ªÉ ƒë·ªçc ƒë·ªãnh nghƒ©a c·ªôt.");
      return errors;
    }
  
    data.forEach((row, rowIndex) => {
      const excelRowNumber = rowIndex + 4;
      const CIF = row["Cif"];
  
      Object.entries(schema).forEach(([key, rules]) => {
        if (["Key", "_id", "__v"].includes(key)) return;
  
        const value = row[key];
  
        if (rules.required && (value === undefined || value === null || value === "")) {
          errors.push(`D√≤ng ${excelRowNumber}: Tr∆∞·ªùng "${key}" c√≥ CIF "${CIF}" l√† b·∫Øt bu·ªôc, kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.`);
          return;
        }
  
        // Ch·ªâ ti·∫øp t·ª•c n·∫øu c√≥ gi√° tr·ªã
        if (value !== undefined && value !== null && value !== "") {
          const valueAsString = String(value);
  
          // 1. Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu
          switch (rules.type) {
            case "integer":
              if (!/^-?\d+$/.test(valueAsString) || isNaN(parseInt(valueAsString))) {
                errors.push(`D√≤ng ${excelRowNumber}: Tr∆∞·ªùng "${key}" c√≥ CIF "${CIF}" ph·∫£i l√† s·ªë nguy√™n.`);
              }
              break;
            case "number":
              if (isNaN(Number(value))) {
                errors.push(`D√≤ng ${excelRowNumber}: Tr∆∞·ªùng "${key}" c√≥ CIF "${CIF}" ph·∫£i l√† s·ªë.`);
              }
              break;
            case "boolean":
              if (!(valueAsString === "true" || valueAsString === "false" || valueAsString === "1" || valueAsString === "0")) {
                errors.push(`D√≤ng ${excelRowNumber}: Tr∆∞·ªùng "${key}" c√≥ CIF "${CIF}" ph·∫£i l√† gi√° tr·ªã boolean (true/false ho·∫∑c 1/0).`);
              }
              break;
            case "string":
              // Kh√¥ng c·∫ßn ki·ªÉm tra
              break;
            default:
              errors.push(`D√≤ng ${excelRowNumber}: Tr∆∞·ªùng "${key}" c√≥ ki·ªÉu kh√¥ng x√°c ƒë·ªãnh trong schema.`);
          }
  
          // 2. Ki·ªÉm tra ƒë·ªô d√†i
          if (rules.maxLength && valueAsString.length > rules.maxLength) {
            errors.push(`D√≤ng ${excelRowNumber}: Tr∆∞·ªùng "${key}" c√≥ CIF "${CIF}" d√†i ${valueAsString.length} k√Ω t·ª±, v∆∞·ª£t qu√° gi·ªõi h·∫°n ${rules.maxLength}.`);
          }
  
          if (rules.minLength && valueAsString.length < rules.minLength) {
            errors.push(`D√≤ng ${excelRowNumber}: Tr∆∞·ªùng "${key}" c√≥ CIF "${CIF}" d√†i ${valueAsString.length} k√Ω t·ª±, ng·∫Øn h∆°n y√™u c·∫ßu t·ªëi thi·ªÉu ${rules.minLength}.`);
          }
  
          // 3. Ki·ªÉm tra pattern (n·∫øu c√≥)
          if (rules.pattern) {
            try {
              const regex = new RegExp(rules.pattern);
              if (!regex.test(valueAsString)) {
                errors.push(`D√≤ng ${excelRowNumber}: Tr∆∞·ªùng "${key}" c√≥ CIF "${CIF}" kh√¥ng kh·ªõp ƒë·ªãnh d·∫°ng y√™u c·∫ßu.`);
              }
            } catch (e) {
              errors.push(`L·ªói ƒë·ªãnh d·∫°ng regex trong schema tr∆∞·ªùng "${key}".`);
            }
          }
  
          // 4. Ki·ªÉm tra gi√° tr·ªã enum (n·∫øu c√≥)
          if (rules.enum && Array.isArray(rules.enum)) {
            const parsedValue = rules.type === "integer" || rules.type === "number" ? Number(value) : value;
            if (!rules.enum.includes(parsedValue)) {
              errors.push(`D√≤ng ${excelRowNumber}: Tr∆∞·ªùng "${key}" c√≥ CIF "${CIF}" ph·∫£i l√† m·ªôt trong c√°c gi√° tr·ªã sau: ${rules.enum.join(", ")}.`);
            }
          }
        }
      });
  
      // Ki·ªÉm tra c√°c c·ªôt kh√¥ng ƒë·ªãnh nghƒ©a trong schema
      Object.keys(row).forEach(excelKey => {
        if (!schema.hasOwnProperty(excelKey)) {
          const extraValue = row[excelKey];
          if (extraValue !== undefined && extraValue !== null && extraValue !== "") {
            console.warn(`D√≤ng ${excelRowNumber}: C·ªôt "${excelKey}" c√≥ CIF "${CIF}" kh√¥ng n·∫±m trong schema, s·∫Ω b·ªã b·ªè qua.`);
            // errors.push(`D√≤ng ${excelRowNumber}: C·ªôt "${excelKey}" kh√¥ng n·∫±m trong ƒë·ªãnh nghƒ©a schema.`);
          }
        }
      });
    });
  
    return errors;
  };
  
  // Parse file Excel
  // const handleFileParse = () => {
  //   if (!file) return alert("Vui l√≤ng ch·ªçn file Excel!");
  //   if (!selectedTemplate) return alert("Vui l√≤ng ch·ªçn template!");

  //   setValidationErrors([]); // Reset l·ªói tr∆∞·ªõc khi parse
  //   setParsedData([]);
  //   setSubmitError(null);
  //   setSubmitSuccess(null);

  //   const reader = new FileReader();
  //   reader.readAsBinaryString(file);
  //   reader.onload = (e) => {
  //     try {
  //       const workbook = XLSX.read(e.target.result, { type: "binary", cellDates: true }); // Th√™m cellDates: true ƒë·ªÉ x·ª≠ l√Ω ng√†y th√°ng t·ªët h∆°n
  //       const sheetName = workbook.SheetNames[0];
  //       const sheet = workbook.Sheets[sheetName];

  //       // B·ªè qua 0 d√≤ng ƒë·∫ßu, d√πng d√≤ng 1 l√†m header
  //       const jsonData = XLSX.utils.sheet_to_json(sheet, { range: 0, defval: "" }); // defval: "" ƒë·ªÉ √¥ tr·ªëng th√†nh chu·ªói r·ªóng

  //       console.log("Raw JSON data:", jsonData);

  //       let mappedData = jsonData;
  //       // --- THAY ƒê·ªîI: S·ª≠ d·ª•ng templateID t·ª´ selectedTemplate ---
  //       switch(selectedTemplate.templateID)
  //       {
  //         case "API_1_6_TTDS_TKTT_DK":
  //           {
  //             mappedData = mapDataForAPI16(jsonData);
  //             break; 
  //           }
  //           case  "API_1_7_TTDS_TKTT_NNGL":
  //           {
  //             mappedData = mapDataForAPI17(jsonData); 
  //             break;  
  //           }
  //            case "API_1_9_UPDATE_TTDS_TKTT_DK":
  //           {
  //             mappedData = mapDataForAPI19(jsonData);
  //             break; 
  //           }
  //           case  "API_1_8_UPDATE_TTDS_TKTT_NNGL":
  //           {
  //             mappedData = mapDataForAPI18(jsonData); 
  //             console.log(mappedData);
  //             break;  
  //           }
          
  //       };
  //       // Th√™m c√°c ƒëi·ªÅu ki·ªán mapping kh√°c n·∫øu c·∫ßn
  //       // else if (selectedTemplate.templateID === "SOME_OTHER_ID") {
  //       //    mappedData = mapDataForOtherAPI(jsonData);
  //       // }

  //       console.log("Mapped data:", mappedData);

  //       // --- THAY ƒê·ªîI: Validate d√πng schemaJson t·ª´ selectedTemplate ---
  //       // ƒê·∫£m b·∫£o schemaJson t·ªìn t·∫°i tr∆∞·ªõc khi g·ªçi validate
  //       if (!selectedTemplate.schemaJson) {
  //           alert("Template ƒë∆∞·ª£c ch·ªçn kh√¥ng c√≥ th√¥ng tin schema ƒë·ªÉ validate.");
  //           return;
  //       }
  //       const errors = validateData(mappedData, selectedTemplate.schemaJson);
  //       setValidationErrors(errors);

  //       if (errors.length === 0) {
  //         setParsedData(mappedData);
  //         console.log("Parsed data (validated):", mappedData);
  //       } else {
  //         setParsedData([]);
  //         console.log("Validation Errors:", errors);
  //       }
  //     } catch (error) {
  //         console.error("Error parsing Excel file:", error);
  //         alert(`ƒê√£ x·∫£y ra l·ªói khi ƒë·ªçc file Excel: ${error.message}`);
  //         setValidationErrors([`L·ªói ƒë·ªçc file: ${error.message}`]);
  //         setParsedData([]);
  //     }
  //   };
  //   reader.onerror = (error) => {
  //       console.error("FileReader error:", error);
  //       alert("Kh√¥ng th·ªÉ ƒë·ªçc file.");
  //       setValidationErrors(["L·ªói ƒë·ªçc file."]);
  //       setParsedData([]);
  //   }
  // };
  const handleFileParse = () => {
    if (!file) return alert("Vui l√≤ng ch·ªçn file Excel!");
    if (!selectedTemplate) return alert("Vui l√≤ng ch·ªçn template!");
  
    setValidationErrors([]);
    setParsedData([]);
    setSubmitError(null);
    setSubmitSuccess(null);
  
    const reader = new FileReader();
    reader.readAsBinaryString(file);
  
    reader.onload = (e) => {
      try {
        const workbook = XLSX.read(e.target.result, { type: "binary", cellDates: true });
        const sheetName = workbook.SheetNames[0];
        const sheet = workbook.Sheets[sheetName];
  
        const jsonData = XLSX.utils.sheet_to_json(sheet, { range: 0, defval: "" }); // D√πng d√≤ng 1 l√†m header
        console.log("Raw JSON data:", jsonData);
  
        const mappedData = jsonData; // Kh√¥ng c·∫ßn mapping n·∫øu header kh·ªõp
  
        if (!selectedTemplate.schemaJson) {
          alert("Template ƒë∆∞·ª£c ch·ªçn kh√¥ng c√≥ th√¥ng tin schema ƒë·ªÉ validate.");
          return;
        }
  
        const errors = validateData(mappedData, selectedTemplate.schemaJson);
        setValidationErrors(errors);
  
        if (errors.length === 0) {
          setParsedData(mappedData);
          console.log("Parsed data (validated):", mappedData);
        } else {
          setParsedData([]);
          console.log("Validation Errors:", errors);
        }
      } catch (error) {
        console.error("Error parsing Excel file:", error);
        alert(`ƒê√£ x·∫£y ra l·ªói khi ƒë·ªçc file Excel: ${error.message}`);
        setValidationErrors([`L·ªói ƒë·ªçc file: ${error.message}`]);
        setParsedData([]);
      }
    };
  
    reader.onerror = (error) => {
      console.error("FileReader error:", error);
      alert("Kh√¥ng th·ªÉ ƒë·ªçc file.");
      setValidationErrors(["L·ªói ƒë·ªçc file."]);
      setParsedData([]);
    };
  };
  
  // H√†m x·ª≠ l√Ω submit (kh√¥ng thay ƒë·ªïi nhi·ªÅu, ch·ªâ th√™m loading/error state)
  const handleSubmit = async () => {
    if (validationErrors.length > 0) {
      alert("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá, vui l√≤ng ki·ªÉm tra l·∫°i!");
      return;
    }
    if (parsedData.length === 0) {
        alert("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ t·∫£i l√™n.");
        return;
    }
    if (!selectedTemplate) {
      alert("Vui l√≤ng ch·ªçn template!");
      return;
    }
    if (!file) {
      alert("Vui l√≤ng ch·ªçn file ƒë·ªÉ t·∫£i l√™n!");
      return;
    }

    setLoadingSubmit(true); // B·∫Øt ƒë·∫ßu loading
    setSubmitError(null);
    setSubmitSuccess(null);

    // Chuy·ªÉn ƒë·ªïi ng√†y th√†nh MMYYYY
    const monthPart = String(selectedDate.getMonth() + 1).padStart(2, '0'); // L·∫•y th√°ng (0-11) + 1, ƒë·∫£m b·∫£o 2 ch·ªØ s·ªë
    const yearPart = selectedDate.getFullYear();
    const formattedMonthYear = `${monthPart}${yearPart}`; // ƒê·ªãnh d·∫°ng MMYYYY

    const requestData = {
      templateID: selectedTemplate.templateID,
      templateName: selectedTemplate.name,
      monthYear: formattedMonthYear,
      data: parsedData,
      total_record: parsedData.length,
      userId: user?.id || "Unknown",
      username: user?.name || "Unknown",
      fileName: file?.name || "Unknown",
      fileType: file?.name?.split(".").pop() || "Unknown",
    };

    console.log("D·ªØ li·ªáu g·ª≠i l√™n:", requestData);

    if (USE_MOCK_DATA) {
      console.log("Mock upload data:", requestData);
      setTimeout(() => { // Gi·∫£ l·∫≠p ƒë·ªô tr·ªÖ m·∫°ng
          setSubmitSuccess("Mock Upload Th√†nh C√¥ng!");
          setLoadingSubmit(false);
          // Reset state sau khi th√†nh c√¥ng? (T√πy ch·ªçn)
          // setFile(null);
          // setSelectedTemplate(null);
          // setParsedData([]);
          // document.querySelector('.file-input').value = ''; // Reset input file
      }, 1500);
    } else {
      try {
        const response = await axios.post(
          `${import.meta.env.VITE_SIMO_APP_API_URL}/api/upload_history`,
          requestData,
          {
            headers: {
              "Content-Type": "application/json",
              "Authorization": "Bearer " + user?.token,
            },
          }
        );
        console.log("Ph·∫£n h·ªìi t·ª´ server:", response.data);
        setSubmitSuccess("T·∫£i l√™n th√†nh c√¥ng!");
        Swal.fire({
          icon: 'success',
          title: 'Th√†nh c√¥ng!',
          text: 'X√°c nh·∫≠n t·∫£i l√™n th√†nh c√¥ng.',
          confirmButtonText: 'OK'
        });
         // Reset state sau khi th√†nh c√¥ng? (T√πy ch·ªçn)
         // setFile(null);
         // setSelectedTemplate(null);
         // setParsedData([]);
         // document.querySelector('.file-input').value = ''; // Reset input file
      } catch (error) {
        console.error("L·ªói khi t·∫£i l√™n:", error);
        const errorMsg = error.response?.data?.message || error.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh";
        setSubmitError(`T·∫£i l√™n th·∫•t b·∫°i! ${errorMsg}`);
        Swal.fire({
          icon: 'error',
          title: 'L·ªói!',
          text: "L·ªói khi t·∫£i l√™n:",
          confirmButtonText: 'ƒê√≥ng'
        });
        // alert("T·∫£i l√™n th·∫•t b·∫°i! Ki·ªÉm tra console ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.");
      } finally {
        setLoadingSubmit(false); // K·∫øt th√∫c loading
      }
    }
  };

  return (
    <div className="upload-container">
      <h1 className="title">Upload D·ªØ Li·ªáu</h1>

      {/* Ch·ªçn Template */}
      <div className="form-group">
        <label>Ch·ªçn Template:</label>
        <select
            onChange={handleTemplateSelect}
            className="dropdown"
            // --- THAY ƒê·ªîI: S·ª≠ d·ª•ng selectedTemplate?.id ---
            value={selectedTemplate?.id || ""} // S·ª≠ d·ª•ng id t·ª´ state template, ho·∫∑c r·ªóng n·∫øu ch∆∞a ch·ªçn
            disabled={loadingTemplates} // Disable khi ƒëang t·∫£i templates
        >
          <option value="">-- Ch·ªçn Template --</option>
          {/* --- THAY ƒê·ªîI: L·∫∑p qua state 'templates' --- */}
          {templates.map((template) => (
            // --- THAY ƒê·ªîI: key v√† value d√πng template.id ---
            <option key={template.id} value={template.id}>
              {template.name}
            </option>
          ))}
        </select>
        {/* Hi·ªÉn th·ªã tr·∫°ng th√°i loading/error c·ªßa templates */}
        {loadingTemplates && <Spinner animation="border" size="sm" className="ms-2" />}
        {errorTemplates && <Alert variant="danger" className="mt-2">{errorTemplates}</Alert>}
      </div>

      {/* DatePicker for Month & Year */}
      <div className="form-group">
        <label>Ch·ªçn Th√°ng & NƒÉm:</label>
        <DatePicker
          selected={selectedDate}
          onChange={(date) => setSelectedDate(date)}
          showMonthYearPicker
          dateFormat="MM/yyyy" // ƒê·ªãnh d·∫°ng hi·ªÉn th·ªã
          // monthFormat="MM" // Thu·ªôc t√≠nh n√†y kh√¥ng chu·∫©n, dateFormat l√† ƒë·ªß
          dropdownMode="select"
          className="form-control" // Th√™m class ƒë·ªÉ d·ªÖ style
        />
      </div>

      {/* Upload File */}
      <div className="form-group">
        <label>Ch·ªçn File Excel:</label>
        <input
          type="file"
          accept=".xlsx, .xls"
          onChange={handleFileUpload}
          className="file-input form-control" // Th√™m class form-control
        />
      </div>

      <button
        onClick={handleFileParse}
        className="parse-btn btn btn-secondary" // Th√™m class Bootstrap
        disabled={!file || !selectedTemplate} // Disable n·∫øu ch∆∞a ch·ªçn file ho·∫∑c template
      >
        Ph√¢n T√≠ch File
      </button>

       {/* Hi·ªÉn th·ªã l·ªói validation */}
      {validationErrors.length > 0 && (
        <div className="error-box alert alert-warning mt-3"> {/* D√πng alert Bootstrap */}
          <h3>‚ö†Ô∏è L·ªói D·ªØ Li·ªáu Trong File:</h3>
          <ul>
            {validationErrors.map((error, index) => (
              <li key={index}>{error}</li>
            ))}
          </ul>
        </div>
      )}

      {/* Hi·ªÉn th·ªã d·ªØ li·ªáu ƒë√£ parse v√† n√∫t Upload */}
      {parsedData.length > 0 && validationErrors.length === 0 && (
        <>
          <h3 className="mt-4">D·ªØ Li·ªáu ƒê√£ Ph√¢n T√≠ch (H·ª£p l·ªá) </h3>
          <h3 className="mt-4">T·ªïng c·ªông {parsedData.length } d√≤ng </h3>
              {/* Di chuy·ªÉn n√∫t Submit l√™n ƒë√¢y */}
    <div className="d-flex justify-content-between align-items-center mb-3">
      <div>
        {loadingSubmit && <Spinner animation="border" className="me-2" />}
        {submitError && <Alert variant="danger" className="d-inline-block mb-0">{submitError}</Alert>}
        {submitSuccess && <Alert variant="success" className="d-inline-block mb-0">{submitSuccess}</Alert>}
      </div>
      <button
        onClick={handleSubmit}
        className="upload-btn btn btn-primary"
        disabled={loadingSubmit}
      >
        {loadingSubmit ? 'ƒêang t·∫£i l√™n...' : 'Upload D·ªØ Li·ªáu'}
      </button>
    </div>
          <div className="table-responsive"> {/* B·ªçc table ƒë·ªÉ responsive */}
            <table className="data-table table table-striped table-bordered table-hover"> {/* Th√™m class Bootstrap */}
              <thead>
                <tr>
                  {/* --- THAY ƒê·ªîI: L·∫•y header t·ª´ schema n·∫øu c√≥, ho·∫∑c t·ª´ d√≤ng ƒë·∫ßu ti√™n --- */}
                  {/* C√°ch 1: L·∫•y t·ª´ schema (n·∫øu schemaJson ƒë√£ parse) */}
                  {selectedTemplate && selectedTemplate.schemaJson && (() => {
                      try {
                          const schema = JSON.parse(selectedTemplate.schemaJson.replace(/^'|'$/g, ''));
                          return Object.keys(schema).map((key) => <th key={key}>{key}</th>);
                      } catch {
                          // N·∫øu l·ªói parse schema, fallback v·ªÅ c√°ch 2
                          return Object.keys(parsedData[0]).map((key) => <th key={key}>{key}</th>);
                      }
                  })()}
                  {/* C√°ch 2: L·∫•y t·ª´ d·ªØ li·ªáu (n·∫øu kh√¥ng c√≥ schema ho·∫∑c l·ªói parse) */}
                  {(!selectedTemplate || !selectedTemplate.schemaJson) && Object.keys(parsedData[0]).map((key) => (
                      <th key={key}>{key}</th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {parsedData.map((row, index) => (
                  <tr key={index}>
                     {/* ƒê·∫£m b·∫£o th·ª© t·ª± c·ªôt kh·ªõp v·ªõi header */}
                     {selectedTemplate && selectedTemplate.schemaJson && (() => {
                      try {
                          const schema = JSON.parse(selectedTemplate.schemaJson.replace(/^'|'$/g, ''));
                          return Object.keys(schema).map((key) => <td key={key}>{row[key]}</td>);
                      } catch {
                          return Object.values(row).map((value, i) => <td key={i}>{String(value)}</td>); // Chuy·ªÉn th√†nh String ƒë·ªÉ tr√°nh l·ªói render object/null
                      }
                     })()}
                     {(!selectedTemplate || !selectedTemplate.schemaJson) && Object.values(row).map((value, i) => (
                      <td key={i}>{String(value)}</td> // Chuy·ªÉn th√†nh String ƒë·ªÉ tr√°nh l·ªói render object/null
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* Hi·ªÉn th·ªã th√¥ng b√°o submit */}
          {loadingSubmit && <Spinner animation="border" className="mt-3" />}
          {submitError && <Alert variant="danger" className="mt-3">{submitError}</Alert>}
          {submitSuccess && <Alert variant="success" className="mt-3">{submitSuccess}</Alert>}


          <button
            onClick={handleSubmit}
            className="upload-btn btn btn-primary mt-3" // Th√™m class Bootstrap
            disabled={loadingSubmit} // Disable khi ƒëang submit
          >
            {loadingSubmit ? 'ƒêang t·∫£i l√™n...' : 'Upload D·ªØ Li·ªáu'}
          </button>
        </>
      )}
    </div>
  );
};

export default UploadData;